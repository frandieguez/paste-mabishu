= Typus

As Django Admin, Typus is designed for a single activity:

    Trusted users editing structured content.

Once installed and configured you can login at http://application.tld/admin

You can download a sample application from github.

    http://github.com/fesplugas/typus_sample_app/tarball/master

Note: Typus doesn't try to be all the things to all the people.

== Installing

You can view the available tasks running

    rake typus

=== Step 1: Install extra plugins.

    rake typus:dependencies

This task will install for you *paginator*, *paperclip* file upload plugin, 
*acts_as_list*, *acts_as_tree*.

=== Step 2: Copy stylesheets to your public/ folder.

    rake typus:assets

=== Step 3: Create an initial configuration file

This action will create a config file on <tt>RAILS_ROOT/config/typus.yml</tt>.

    rake typus:configure

=== Step 4: Create the needed tables on the db by running.

    script/generate typus_migration
    rake db:migrate
    rake typus:seed email='youremail@yourdomain.com' RAILS_ENV=production

=== Step 5: Start your application.

Start your application and go to http://application.tld/admin/

== Plugin Configuration Options

You can overwriting the following settings:

    Typus::Configuration.options[:app_name] = "Your app name"
    Typus::Configuration.options[:app_description] = "App Details"
    Typus::Configuration.options[:per_page] = "20"
    Typus::Configuration.options[:form_rows] = "20"
    Typus::Configuration.options[:form_columns] = "20"
    Typus::Configuration.options[:roles] = %w( admin editor )

Place this settings in a initializer at <tt>config/initializers/typus.rb</tt>.

== Configuration file options

If the configuration file is broken you'll see a <tt>typus.yml</tt> text on the admin interface.

=== Typus Fields

    fields:
      list: name, created_at, category_id, status
      form: name, body, created_at, status
      relationship: name, category_id

NOTE: Upload files only works if you follow Paperclip naming conventions.

EXTRAS: In form fields you can add a "*" making the field read-only, this 
field will be shown in the form but couldn't be editable. Example with 
"created_at" and "status" fields being read-only:

    fields:
      list: name, created_at, category_id, status
      form: name, body, *created_at, *status
      relationship: name, category_id

=== External Forms

    relationships:
      has_and_belongs_to_many: users
      has_many: projects

=== Filters

    filters: status, author_id, created_at

=== Order

Adding minus (-) sign before the attribute will make the order DESC.

    order_by: -attribute1, attribute2

=== Searches

    search: attribute1, attribute2

=== Want more actions?

    actions:
      list: notify_all
      form: notify

These actions will only be available on the context <tt>list</tt> and <tt>form</tt> of Typus.

You'll have to create controllers that inherit from TypusController

    class Typus::NewslettersController < TypusController

      ##
      # Action to deliver emails ...
      def deliver
        ...
        redirect_to :back
      end

    end

For feedback you can use the flash method.

- <tt>flash[:notice]</tt> just some feedback.
- <tt>flash[:error]</tt> when there's something wrong.
- <tt>flash[:success]</tt> when the action successfully finished.

### Applications, modules and submodules

To group modules into an application use <tt>application<tt>.

    application: CMS

Each module has submodules grouped using <tt>module</tt>.

    module: Article

Example: (E-Commerce Application)

    Product:
      application: ECommerce
    Client:
      application: ECommerce
    Category:
      module: Product
    Option Type:
      module: Product

Example: (Blog)

    Post:
      application: Blog
    Category:
      application: Blog
    Tag:
      module: Post

== Custom Views

You can add your custom views to match your application requirements. Views 
you can customize.

    index.html.erb
    edit.html.erb

Example:

You need a custom view on the Articles listing. Under <tt>app/view/typus/articles</tt>
add the file <tt>index.html.erb</tt> and Typus default listing will be overrided.

== Customize Interface

You can customize the interface by placing on <tt>views/typus</tt> the following files.

=== Dashboard

    _dashboard_sidebar.html.erb
    _dashboard_top.html.erb
    _dashboard_bottom.html.erb

=== Models

    MODEL/_index_top.html.erb
    MODEL/_index_bottom.html.erb
    MODEL/_new_top.html.erb
    MODEL/_new_bottom.html.erb
    MODEL/_new_bottom.html.erb
    MODEL/_new_sidebar.html.erb
    MODEL/_edit_top.html.erb
    MODEL/_edit_bottom.html.erb
    MODEL/_edit_bottom.html.erb
    MODEL/_edit_sidebar.html.erb

== Roles

Typus has a simple Roles support. By default only two roles are defined, but 
you can add as many as you want.

    Typus::Configuration.options[:roles] = %w( admin editor )

In <tt>config/typus_roles.yml</tt> you can define the allowed actions per role.

    admin:
      TypusUser: rw
      Post: rw
      Category: rw

    editor:
      Post: rw
      Category: ro

NOTE: This is an initial implementation so it can change in the future.

== Acknowledgments

- Isaac Feliu - http://railslab.net
- Jaime Iniesta - http://railes.neth
- supercoco9, sd and hydrus (sort_by)
- Laia Gargallo - http://azotacalles.net
- Xavier Noria (fxn) - http://www.hashref.com
- Sergio Espeja - http://github.com/spejman

== Author, contact & bugs

You can contact me at <francesc.esplugas@gmail.com>

BROWSE SOURCE on GitHub: http://github.com/fesplugas/typus

Copyright (c) 2007-2008 Francesc Esplugas Marti, released under the MIT license